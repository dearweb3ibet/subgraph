type Bet @entity {
  id: ID!
  # Params
  createdTimestamp: BigInt!
  creatorAddress: String!
  creatorFee: BigInt!
  symbol: String!
  targetMinPrice: BigInt!
  targetMaxPrice: BigInt!
  targetTimestamp: BigInt!
  participationDeadlineTimestamp: BigInt!
  feeForSuccess: BigInt!
  feeForFailure: BigInt!
  isClosed: Boolean!
  isSuccessful: Boolean!
  # Participants
  participants: [BetParticipant!]! @derivedFrom(field: "bet")
  participantsNumber: Int!
}

type BetParticipant @entity {
  id: ID! # combination of bet id and account address
  bet: Bet!
  addedTimestamp: BigInt!
  accountAddress: String!
  fee: BigInt!
  isCreator: Boolean!
  isFeeForSuccess: Boolean!
  isWinner: Boolean!
  winning: BigInt!
}

type Contest @entity {
  id: ID! # contract address
  waves: [ContestWave!]! @derivedFrom(field: "contest")
}

type ContestWave @entity {
  id: ID! # combination of contest address and wave id
  contest: Contest!
  waveId: BigInt!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  closeTimestamp: BigInt!
  winnersNumber: BigInt!
  winning: BigInt!
  participants: [ContestWaveParticipant!]! @derivedFrom(field: "wave")
}

type ContestWaveParticipant @entity {
  id: ID! # combination of wave id and account address
  wave: ContestWave!
  accountAddress: String!
  successes: BigInt!
  failures: BigInt!
  variance: BigInt!
}
