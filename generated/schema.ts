// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bet", id.toString(), this);
    }
  }

  static load(id: string): Bet | null {
    return changetype<Bet | null>(store.get("Bet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdDate(): BigInt | null {
    let value = this.get("createdDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdDate(value: BigInt | null) {
    if (!value) {
      this.unset("createdDate");
    } else {
      this.set("createdDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get minPrice(): BigInt | null {
    let value = this.get("minPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minPrice(value: BigInt | null) {
    if (!value) {
      this.unset("minPrice");
    } else {
      this.set("minPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxPrice(): BigInt | null {
    let value = this.get("maxPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxPrice(value: BigInt | null) {
    if (!value) {
      this.unset("maxPrice");
    } else {
      this.set("maxPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayStartTimestamp(): BigInt | null {
    let value = this.get("dayStartTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayStartTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayStartTimestamp");
    } else {
      this.set("dayStartTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get rate(): BigInt | null {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rate(value: BigInt | null) {
    if (!value) {
      this.unset("rate");
    } else {
      this.set("rate", Value.fromBigInt(<BigInt>value));
    }
  }

  get firstMember(): string | null {
    let value = this.get("firstMember");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set firstMember(value: string | null) {
    if (!value) {
      this.unset("firstMember");
    } else {
      this.set("firstMember", Value.fromString(<string>value));
    }
  }

  get secondMember(): string | null {
    let value = this.get("secondMember");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set secondMember(value: string | null) {
    if (!value) {
      this.unset("secondMember");
    } else {
      this.set("secondMember", Value.fromString(<string>value));
    }
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(<string>value));
    }
  }

  get winning(): BigInt | null {
    let value = this.get("winning");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winning(value: BigInt | null) {
    if (!value) {
      this.unset("winning");
    } else {
      this.set("winning", Value.fromBigInt(<BigInt>value));
    }
  }
}
